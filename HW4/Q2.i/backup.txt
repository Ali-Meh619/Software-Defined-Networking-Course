


s1


  
s2

  


  receive

  #!/usr/bin/env python
import sys
import struct
import os

from scapy.all import sniff, sendp, hexdump, get_if_list, get_if_hwaddr
from scapy.all import Packet, IPOption
from scapy.all import ShortField, IntField, LongField, BitField, FieldListField, FieldLenField
from scapy.all import IP, TCP, UDP, Raw
from scapy.layers.inet import _IPOption_HDR
from send import Tunnel

def get_if():
    """
    Exactly the same as send.py
    """
    ifs=get_if_list()
    iface=None
    for i in get_if_list():
        if "eth0" in i:
            iface=i
            break
    if not iface:
        print "Cannot find eth0 interface"
        exit(1)
    return iface

def handle_pkt(pkt):
    """
    Anounces to the user that a packet has arrived.
    """
    if Tunnel in pkt or (TCP in pkt and pkt[TCP].dport == 1234):
        print "got a packet"
        pkt.show2()
        sys.stdout.flush()


def main():
    ifaces = filter(lambda i: 'eth' in i, os.listdir('/sys/class/net/'))
    iface = ifaces[0]
    print "sniffing on %s" % iface
    sys.stdout.flush()
    sniff(iface = iface,
        prn = lambda x: handle_pkt(x))

if __name__ == '__main__':
    main()


send

#!/usr/bin/env python
"""
This script, creates the desired tunneling packets and sends them to the
specified destination.
"""
import argparse
import sys
import os
import socket
import random
import struct
import argparse

from scapy.all import sendp, send, get_if_list, get_if_hwaddr, hexdump
from scapy.all import Packet
from scapy.all import Ether, IP, UDP, TCP
from scapy.all import ShortField, bind_layers

TYPE_TUNNEL = 0x1212      # Our convention for this protocol
TYPE_IPV4 = 0x0800

class Tunnel(Packet):
    """
    This class creates the TYPE_TUNNEL packets that we use in the p4 code.
    """
    name = "Tunnel"
    fields_desc = [
        ShortField("pid", 0),
        ShortField("UID", 0)
    ]
    def mysummary(self):
        return self.sprintf("pid=%pid%, UID=%UID%")

def get_if():
    """
    The given network topology connects a single switch to every host,
    so if the connections have been established sucessfully, there should be at least,
    one interface (namely hx-eth0) for each host, this functiion returns the said
    interface or raises an error if no interface is found.
    """
    ifs=get_if_list()
    iface=None 
    for i in get_if_list():
        if "eth0" in i:
            iface=i
            break
    if not iface:
        print "Cannot find eth0 interface"
        exit(1)
    return iface

def main():
    """
    First an argument parser is used to prompt the user to enter
    the neede information, this includes:
    1) an IP address, if the user wants to send normal IPV4 packets.
    2) a certain message that will be added to the payload, this will
        be important for the next part.
    3) a UID, functioning in the same way specified in the p4 code.
    if everything goes fine, a summery of the packet is shown and the
    packet is sent on it's way.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('ip_addr', type=str, help="The destination IP address to use")
    parser.add_argument('message', type=str, help="The message to include in packet")
    parser.add_argument('--UID', type=int, default=None, help='The tunnel UID to use')
    args = parser.parse_args()

    bind_layers(Ether, Tunnel, type=TYPE_TUNNEL)
    bind_layers(Tunnel, IP, pid=TYPE_IPV4)

    addr = socket.gethostbyname(args.ip_addr)
    UID = args.UID
    iface = get_if()

    if (UID is not None):
        print "sending on interface {} to UID {}".format(iface, str(UID))
        pkt =  Ether(src=get_if_hwaddr(iface), dst='ff:ff:ff:ff:ff:ff')
        pkt = pkt / Tunnel(UID=UID) / IP(dst=addr) / args.message
    else:
        print "sending on interface {} to IP addr {}".format(iface, str(addr))
        pkt =  Ether(src=get_if_hwaddr(iface), dst='ff:ff:ff:ff:ff:ff')
        pkt = pkt / IP(dst=addr) / TCP(dport=1234, sport=random.randint(49152,65535)) / args.message

    pkt.show2()
    sendp(pkt, iface=iface, verbose=False)


if __name__ == '__main__':
    main()

p4

/* -*- P4_16 -*- */
#include <core.p4>
#include <v1model.p4>

const bit<16> TYPE_TUNNEL = 0x1212;
const bit<16> TYPE_IPV4 = 0x800;

/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

typedef bit<9>  egressSpec_t;
typedef bit<48> macAddr_t;
typedef bit<32> ip4Addr_t;

header ethernet_t {
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16>   etherType;
}

header tunnel_t {
    bit<16> proto_id;
    bit<16> UID;
}

header ipv4_t {
    bit<4>    version;
    bit<4>    ihl;
    bit<8>    diffserv;
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}

struct metadata {
    /* empty */
}

struct headers {
    ethernet_t   ethernet;
    tunnel_t   tunnel;
    ipv4_t       ipv4;
}

/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            TYPE_TUNNEL: parse_tunnel;
            TYPE_IPV4: parse_ipv4;
            default: accept;
        }
    }

    state parse_tunnel {
        packet.extract(hdr.tunnel);
        transition select(hdr.tunnel.proto_id) {
            TYPE_IPV4: parse_ipv4;
            default: accept;
        }
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition accept;
    }

}

/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {   
    apply {  }
}


/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {
    action drop() {
        mark_to_drop(standard_metadata);
    }
    
    action ipv4_forward(macAddr_t dstAddr, egressSpec_t port) {
        standard_metadata.egress_spec = port;
        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
        hdr.ethernet.dstAddr = dstAddr;
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
    }
    
    table ipv4_lpm {
        key = {
            hdr.ipv4.dstAddr: lpm;
        }
        actions = {
            ipv4_forward;
            drop;
            NoAction;
        }
        size = 1024;
        default_action = drop();
    }
    
    action tunnel_forward(egressSpec_t port) {
        standard_metadata.egress_spec = port;
    }

    table tunnel_exact {
        key = {
            hdr.tunnel.UID: exact;
        }
        actions = {
            tunnel_forward;
            drop;
        }
        size = 1024;
        default_action = drop();
    }

    apply {
        if (hdr.ipv4.isValid() && !hdr.tunnel.isValid()) {
            // Process only non-tunneled IPv4 packets
            ipv4_lpm.apply();
        }

        if (hdr.tunnel.isValid()) {
            // process tunneled packets
            tunnel_exact.apply();
        }
    }
}

/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply {  }
}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   **************
*************************************************************************/

control MyComputeChecksum(inout headers  hdr, inout metadata meta) {
     apply {
	update_checksum(
	    hdr.ipv4.isValid(),
            { hdr.ipv4.version,
	      hdr.ipv4.ihl,
              hdr.ipv4.diffserv,
              hdr.ipv4.totalLen,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.fragOffset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr },
            hdr.ipv4.hdrChecksum,
            HashAlgorithm.csum16);
    }
}

/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.tunnel);
        packet.emit(hdr.ipv4);
    }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;

s1

{
  "target": "bmv2",
  "p4info": "build/problem2_1.p4.p4info.txt",
  "bmv2_json": "build/problem2_1.json",
  "table_entries": [
    {
      "table": "MyIngress.ipv4_lpm",
      "match": {
        "hdr.ipv4.dstAddr": ["10.0.1.1", 32]
      },
      "action_name": "MyIngress.ipv4_forward",
      "action_params": {
        "dstAddr": "00:00:00:00:01:01",
        "port": 1
      }
    },
    {
      "table": "MyIngress.ipv4_lpm",
      "match": {
        "hdr.ipv4.dstAddr": ["10.0.2.2", 32]
      },
      "action_name": "MyIngress.ipv4_forward",
      "action_params": {
        "dstAddr": "00:00:00:02:02:00",
        "port": 2
      }
    },

    {
      "table": "MyIngress.tunnel_exact",
      "match": {
        "hdr.tunnel.UID": [1]
      },
      "action_name": "MyIngress.tunnel_forward",
      "action_params": {
        "port": 1
      }
    },
    {
      "table": "MyIngress.tunnel_exact",
      "match": {
        "hdr.tunnel.UID": [2]
      },
      "action_name": "MyIngress.tunnel_forward",
      "action_params": {
        "port": 2
      }
    }
  ]
}


s2


{
  "target": "bmv2",
  "p4info": "build/problem2_1.p4.p4info.txt",
  "bmv2_json": "build/problem2_1.json",
  "table_entries": [
    {
      "table": "MyIngress.ipv4_lpm",
      "match": {
        "hdr.ipv4.dstAddr": ["10.0.1.1", 32]
      },
      "action_name": "MyIngress.ipv4_forward",
      "action_params": {
        "dstAddr": "00:00:00:01:02:00",
        "port": 2
      }
    },
    {
      "table": "MyIngress.ipv4_lpm",
      "match": {
        "hdr.ipv4.dstAddr": ["10.0.2.2", 32]
      },
      "action_name": "MyIngress.ipv4_forward",
      "action_params": {
        "dstAddr": "00:00:00:00:02:02",
        "port": 1
      }
    },
    {
      "table": "MyIngress.ipv4_lpm",
      "match": {
        "hdr.ipv4.dstAddr": ["10.0.3.3", 32]
      },
      "action_name": "MyIngress.ipv4_forward",
      "action_params": {
        "dstAddr": "00:00:00:03:02:00",
        "port": 3
      }
    },

    {
      "table": "MyIngress.tunnel_exact",
      "match": {
        "hdr.tunnel.UID": [1]
      },
      "action_name": "MyIngress.tunnel_forward",
      "action_params": {
        "port": 2
      }
    },
    {
      "table": "MyIngress.tunnel_exact",
      "match": {
        "hdr.tunnel.UID": [2]
      },
      "action_name": "MyIngress.tunnel_forward",
      "action_params": {
        "port": 1
      }
    },
    {
      "table": "MyIngress.tunnel_exact",
      "match": {
        "hdr.tunnel.UID": [3]
      },
      "action_name": "MyIngress.tunnel_forward",
      "action_params": {
        "port": 3
      }
    }
  ]
}
